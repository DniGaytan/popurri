Daniel Alejandro Gaytan Botello A00819362
Diego Enrique Treviño Ferrer A00819313


*|* Semana 1 : 

- Diego:

* Pasé los diagramas de sintaxis a una gramática legible por ANTLR4 y con ello generé las clases PopurriParser y PopurriLexer utilizando antlr4

* Cree el cubo semántico de tipos donde tiene toda posible combinación de operador y tipos

* Generé un archivo para correr archivos de prueba (test.py)

* Hice "refactor" al código de mi compañero para hacer mejor uso de la clase PopurriParser

- Daniel:

* Se creo la tabla de variables para clases y contexto global. Ademas de ayudar a mi companero a hacer la tabla de variables para funciones.

* El archivo compilador que contiene clase compilador, el cual ejecuta el analizador lexico, sintactico y finalmente hace las correspondientes llamadas al analizador semantico y creacion de tabla de variables.

* Se creo la arquitectura inicial de la tabla de variables, pensando en el concepto de direcciones virtuales para todos los tipos: INT, FLOAT, STRING, BOOL. 

* Se creo un archivo de constantes (popurri_tokens) a utilizar en el transcurso del desarrollo del compilador.


*|* Semana 2 : 

- Diego:

* Agregué los puntos neuralgicos para que la generación de cuadruplos en expresiones (y todas sus sub-reglas)

* Agregué los puntos neuralgicos para que la generación de cuadruplos en while loop

* Arreglé un bug al momento de llenar los brincos en GOTOs para estatuos if, elseif y else

* Refactor de funciones para que sean más legibles las llamadas

* Agregué un workflow al repo de Github para que se corran las pruebas cuando se haga push a master y a PR

- Daniel:

* Se corrigieron y agregaron puntos neuralgicos para efectuar la generacion de cuadruplos para las expresiones con parentesis.

* Se agregaron los puntos neuralgicos para generar GOTOS y GOTOSF para el estatuto if, elseif y else. (Sufrian bugs hasta que Diego los arreglo)

* Se creo una clase QuadWrapper que simulaba todo el proceso de generacion de cuadruplos. Imitaba el algoritmo utilizado para el fin anterior.

* Mi companero y yo corregimos unos problemas de los diagramas de sintaxis que evitaban la generacion exitosa de los cuadruplos.


*|* Semana 3 : 

- Diego:

* Agregué los puntos neuralgicos para que la generación de cuadruplos en breaks (y validación para que sólo se use dentro de loops)

* Hice refactor a cómo se rellenan los GOTOs en ifs y whiles (llenaban los GOTOs pertenecientes a breaks)

* Arreglé una regla en la gramática para permitir comentarios al final de estatutos

* Finalicé el proceso de migración de strings de error a tokens

* Agregué validación de tipos en llamadas a funciones (para que haga match con la firma de dicha funcion)

